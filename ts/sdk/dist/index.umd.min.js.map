{"version":3,"file":"index.umd.min.js","sources":["../src/contracts/SwaprouterContract.ts"],"sourcesContent":["/**\n* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the cosmwasm-typescript-gen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { StdFee } from \"@cosmjs/amino\";\nexport type ExecuteMsg = {\n  set_route: {\n    input_denom: string;\n    output_denom: string;\n    pool_route: SwapAmountInRoute[];\n    [k: string]: unknown;\n  };\n};\nexport interface SwapAmountInRoute {\n  pool_id: number;\n  token_out_denom: string;\n  [k: string]: unknown;\n}\nexport interface GetOwnerResponse {\n  owner: string;\n  [k: string]: unknown;\n}\nexport interface GetRouteResponse {\n  pool_route: SwapAmountInRoute[];\n  [k: string]: unknown;\n}\nexport interface InstantiateMsg {\n  owner: string;\n  [k: string]: unknown;\n}\nexport type QueryMsg = {\n  get_owner: {\n    [k: string]: unknown;\n  };\n} | {\n  get_route: {\n    input_denom: string;\n    output_denom: string;\n    [k: string]: unknown;\n  };\n};\nexport type Addr = string;\nexport interface State {\n  owner: Addr;\n  [k: string]: unknown;\n}\nexport interface SwapMsgReplyState {\n  original_sender: Addr;\n  swap_msg: MsgSwapExactAmountIn;\n  [k: string]: unknown;\n}\nexport interface MsgSwapExactAmountIn {\n  routes: SwapAmountInRoute[];\n  sender: string;\n  token_in?: Coin | null;\n  token_out_min_amount: string;\n  [k: string]: unknown;\n}\nexport interface Coin {\n  amount: string;\n  denom: string;\n  [k: string]: unknown;\n}\nexport interface SwaprouterReadOnlyInterface {\n  contractAddress: string;\n  getOwner: () => Promise<GetOwnerResponse>;\n  getRoute: ({\n    inputDenom,\n    outputDenom\n  }: {\n    inputDenom: string;\n    outputDenom: string;\n  }) => Promise<GetRouteResponse>;\n}\nexport class SwaprouterQueryClient implements SwaprouterReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n    this.getOwner = this.getOwner.bind(this);\n    this.getRoute = this.getRoute.bind(this);\n  }\n\n  getOwner = async (): Promise<GetOwnerResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_owner: {}\n    });\n  };\n  getRoute = async ({\n    inputDenom,\n    outputDenom\n  }: {\n    inputDenom: string;\n    outputDenom: string;\n  }): Promise<GetRouteResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_route: {\n        input_denom: inputDenom,\n        output_denom: outputDenom\n      }\n    });\n  };\n}\nexport interface SwaprouterInterface extends SwaprouterReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  setRoute: ({\n    inputDenom,\n    outputDenom,\n    poolRoute\n  }: {\n    inputDenom: string;\n    outputDenom: string;\n    poolRoute: SwapAmountInRoute[];\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n}\nexport class SwaprouterClient extends SwaprouterQueryClient implements SwaprouterInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.setRoute = this.setRoute.bind(this);\n  }\n\n  setRoute = async ({\n    inputDenom,\n    outputDenom,\n    poolRoute\n  }: {\n    inputDenom: string;\n    outputDenom: string;\n    poolRoute: SwapAmountInRoute[];\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      set_route: {\n        input_denom: inputDenom,\n        output_denom: outputDenom,\n        pool_route: poolRoute\n      }\n    }, fee, memo, funds);\n  };\n}"],"names":["SwaprouterQueryClient","client","contractAddress","_this","this","getOwner","__awaiter","queryContractSmart","get_owner","getRoute","_a","inputDenom","outputDenom","get_route","input_denom","output_denom","bind","SwaprouterClient","_super","sender","call","setRoute","fee","memo","funds","poolRoute","execute","set_route","pool_route","_b","__extends"],"mappings":";;;;;gxDA6EA,IAAAA,EAIE,SAAYC,EAAwBC,GAApC,IAKCC,EAAAC,KAEDA,KAAAC,SAAW,WAAA,OAAAC,EAAAH,OAAA,OAAA,GAAA,sCACT,MAAO,CAAA,EAAAC,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DM,UAAW,CAAE,YAGjBJ,KAAQK,SAAG,SAAOC,OAChBC,EAAUD,EAAAC,WACVC,EAAWF,EAAAE,4EAKX,MAAO,CAAA,EAAAR,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DW,UAAW,CACTC,YAAaH,EACbI,aAAcH,aArBlBR,KAAKH,OAASA,EACdG,KAAKF,gBAAkBA,EACvBE,KAAKC,SAAWD,KAAKC,SAASW,KAAKZ,MACnCA,KAAKK,SAAWL,KAAKK,SAASO,KAAKZ,KACpC,EAmCHa,EAAA,SAAAC,GAKE,SAAAD,EAAYhB,EAA+BkB,EAAgBjB,GAA3D,IAAAC,EACEe,EAAME,KAAAhB,KAAAH,EAAQC,IAKfE,YAEDD,EAAQkB,SAAG,SAAOX,EAQfY,EAAwCC,EAAeC,GAPxD,IAAAb,eACAC,EAAWF,EAAAE,YACXa,EAASf,EAAAe,sBAKR,IAAAH,IAAAA,EAAsC,iFAChC,KAAA,EAAA,MAAA,CAAA,EAAMlB,KAAKH,OAAOyB,QAAQtB,KAAKe,OAAQf,KAAKF,gBAAiB,CAClEyB,UAAW,CACTb,YAAaH,EACbI,aAAcH,EACdgB,WAAYH,IAEbH,EAAKC,EAAMC,IANd,KAAA,EAAA,MAAA,CAAA,EAAOK,kBAfP1B,EAAKF,OAASA,EACdE,EAAKgB,OAASA,EACdhB,EAAKD,gBAAkBA,EACvBC,EAAKkB,SAAWlB,EAAKkB,SAASL,KAAKb,IACpC,CAmBH,0PA9BsC2B,CAAqBb,EAAAC,GA8B1DD,CAAD,CA9BA,CAAsCjB"}